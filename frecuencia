#include<16F877.h>
#use delay(clock=4000000)
#fuses NOWDT,XT,NOPROTECT,NOLVP
#define use_port_kbd TRUE
#include <C:\Users\valerio\Desktop\Entrenador UPC\CCS\4-Generador de frecuencia\Librerias\LCD_PORTC.C> //Incluimos libreria para Display
#include <stdio.h>
#include <math.h>
#use standard_io(a)

//Definiciones
#define DIGI_MAX 4          //Numero de digitos maximos 5.
#DEFINE salida PIN_A0  //Definimos pin de salid de nuestro generador de f

//**variables globales**
int cont=0,cont_2=0,cont_3=0,posicion=0,estado=0; //variables tipo entera 8 bits (desde 0 a 254)

char pulsadoo,free_individual[DIGI_MAX];    //variable tipo char, contiene el codigo ascii del caracter a guardar
int16 aux=0,free=0,pulso=0;          //variablesde tipo intero de 16 bits(desde 0 a 65535);

//**Prototi funciones**
void refresca_led(void);              //Funcion de actualizar datos de la pantalla LCD alfanumerica
void lectura_teclado(void);           //Funcion que permite leer las teclas que se presionan en el teclado matricial
void_calcula_numero(void);          //junta las 5 pulsaciones de numeros individuales en un numero unico
void reinicia_variables(void);      //Pone cero las variables de entorno

//**Funcion interrupcion**
#int_TIMER1
void TIMER_isr(void)                //Funcion interrupcion Timer1
{
output_toggle(SALIDA);          //Invierte el estado de la salida del generador de frecuencias
set_timer(65535-pulso);          //Recarga el timer con el valor del pulso deseado
}

//**Funcion refresco display**

void refresca_lcd(void)          //Funcion refresca display alfanumerico
{
switch(cont_2){
    case 0:                                        //caso 0
    printf(led_put,"\fFree:%Lu(Hz)\nIntro:_",free);//Ningun digito introducido
    break;

    case 1:
    printf(led_put,"\fFree:%Lu(Hz)\nIntro:%c_\n",free,free_individual[0],); //primer digito introducido
    break;

    case 2:                                                                    //Caso2                                                                                                                        
    printf(led_put,"\fFree:%Lu(Hz)\nIntro:%c%c_\n",free,free_individual[0],free_individual[1]);    //1° y 2° introducidos
    break;                                                                     //Termina la funcion

    case 3:                                                                    //Caso2                                                                                                                        
    printf(led_put,"\fFree:%Lu(Hz)\nIntro:%c%c%c_\n",free,free_individual[0],free_indibidual[1],free_individual[2]);    //1°, 2° y 3°
    break;                                                                     //Termina la funcion

    case 4:
    printf(led_put,"\fFree:%Lu(Hz)\nIntro:%c%c%c%c_\n",free,free_individual[0],free_indibidual[1],free_individual[2],free_individual[3]);    //1°, 2°, 3° y 4
    break;                                                                     //Termina la funcion

    default:

    printf(lcd_putc,"\fError!"); //muestra error por pantalla
    delay_ms(250);
    delay_ms(250);
    delay_ms(250);
    delay_ms(250);
    reinicia_variables();            //Reinicia las variables
    break;   //Termina la funcion

        
    
    }
    
}//Fin refresca_lcd

//**Funcion principal**

void main(void)
{
//Carga de funciones
lcd_init();                    //Carga la funcion del display alfanumerico
kbd_init()                     //Carga la funcion del teclado matricial
PORT_B_PULLUPS(TRUE);          //Utilizamos las resistencias de pull_up puerto B

printf(led_putc,"\fGenerador\nde funciones");        //Mensaje de bienvenida
delay_ms(255);
delay_ms(250);
delay_ms(250);
delay_ms(250);
refresca_lcd();                 //Refresca el display

reinicia_variables();           //Ponemos las variables a cero

setup_timer_I(T1_internal T1_DIV_BY_1);          //iniciamos Timer 1, Oscilador interno y preescalar por 1

disable_interrupts8int_timer1);

}
                                                                      


    



